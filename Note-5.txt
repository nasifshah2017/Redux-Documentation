Lecture-82: CONNECTing Redux and React

In this lesson we are going to "connect" and remember that word "connect" but we are going to connect what is in our "redux" store with an actual raect component so this is where we ended,


const theStore = createStore(rootReducer);

ReactDOM.render(

	<Provider store = {theStore}>

		<App />

	</Provider>,

	document.getElementById("root")

);


We have the Provider component and the Provider has the access to the Store (theStore). The store is made up of root reducer (rootReducer). The root reducer is made up of bunch of little 

reducers and each one of those little reducers return a piece of state. 


So, the rootReducer is the manager of theStore, theStore is just an empty building wihout any reducers in it, the rootReducer does not return any state on its own, it simply collects all 

the individual reducers, each individual reducer is like a department in the grocery store and in our case we have got the frozen department (frozenReducer), so we have atleast one 

department for the manager to manage and then the manager can add that department to theStore. 


So, according to our analogy we have a Store with just one department, the frozen department (frozenReducer) but we will add a few more departments in a second.


First we are going to open up the file structure and we are going to go to the App.js file (src/App.js), and we are going to erase everything inside the App function, we are also going to 

erase the line that is importing the logo in this file and we will add a new component inside the App function,


App.js

src/App.js


import React from "react";

import "./App.css";


function App() {

	return(

		<div className = "App">

			<FrozenDept />

		</div>

	); 

}


export default App;


We will need to import the FrozenDept component in the App.js file but first we need to make this component.


We will make a new folder in our src folder and we will call it components and inside of the components folder we will make a new file and we will call it FrozenDept.js,


FrozenDept.js

import React, { Component } from "react";


class FrozenDept extends Component {

	render() {

		return (

			<h1>The Frozen Food Department</h1>

		)

	}

}


export default FrozenDept;



Ok so we made our file, now we will go to the App.js file and we will import the FrozenDept component from the App.js file,


App.js

import React from "react";

import "./App.css";

import FrozenDept from "./components/FrozenDept";


function App() {

	return(

		<div className = "App">

			<FrozenDept />

		</div>

	);

}


export default App;


And that would do the trick, now if we visit our browser this is what we will see,


localhost:3000


	The Frozen Food Department!


There we go, there is our heading for the Frozen Department and we have rendered a new component. 


So, this is the part now where we need to grab from the "redux" store, a piece of state. This is that application state kind of thing where we have got a component and rather than the 

component managing the state itself, it is being managed inside of redux so any component can grab it. 


This is not going to be the most practical example of what we are going to do because we have a very small application that we would never use "redux" to do this for but we are going to 

show ho to finish wiring this up so we can finish connecting them.


So, that a component can get something out of the "redux" store. 


FrozenDept.js

src/components/FrozenDept.js


import React, { Component } from "react"; 


// We want this "react" component to know about "redux". To do that we need some help .... or some glue

// The glue is react-redux!


class FrozenDept extends Component {

	render() {

		return(

			<h1>The Frozen Food Department!</h1>

		)

	}

}


export default FrozenDept;


"react-redux" is our module nd our stand in-between what right now is 100% "react", there is zero "redux" in this component, so that is the "react" part and over in our rootReducer.js file,

everything is 100% "redux", there is zero "react". The "react" FrozenDept component and the "redux" rootReducer file are going to communicate and inorder to do that we are going to use the

"react-redux" module from where we will import the connect() function,


FrozenDept.js

src/components/FrozenDept.js


import React, { Component } from "react";


// We want this component to know about redux. To do that we need some help ... or some glue. 

// The glue is react-redux! We need to import the connect() function from react-redux! 


import { connect } from "react-redux";


class FrozenDept extends Component {

	render() {

		return(

			<h1>The Frozen Food Department</h1>

		)

	}

}


export default FrozenDept



// Again this is at the component level, if a "react" component needs to know about "redux" the connect() function is what we are going to import from the "react-redux" module and we are 

// going to use that in the "react" component file. 


// We also need to change the way we export the "react" component and it is going to be a dead giveaway if we want to know that if a "react" component using "redux" then we won't be using

// the "export default" component anymore. 


// Instead we are going to "export default" the connect() function and also the "react" component with it, 



FrozenDept.js

import React, { Component } from "react";


// We want this component to know about "redux".

// To do that, we need some help.... or some glue

// The glue is "react-redux"! We need the connect() function


import { connect } from "react-redux";


class FrozenDept extends Component {

	render() {

		return(

			<h1>The Frozen Food Department</h1>

		)

	}

}



// export default FrozenDept;

export default connect()(FrozenDept);


// This is how we connect our "redux" store with our "react" component.

// Here, the connect() function is being handed the react component as an argument (parameter). 


Now we will briefly explain the connect() function expression that we had written, 


export default connect() (FrozenDept);



If we have this expression,

	x(1)(2)


Can we make this work?


Now, depending on how long we have been doing JavaScript this might be very obvious to us. This is functional programming top to bottom that is everything we are doing with "redux" here and

that is exactly what this thing is doing.


In the case of API, where we need to pass other data to other places then it is very common, so the question is how do we do this? 


Well, if you make a function called x and we are passing a parameter to x called n,


function x(n) {

	console.log(n);

}



x(1)(2);



And then we console.log(n), then that function is not going to work, because on the console it says, "x (....) is not a function". Well, x(1)(2) is not a function naturally, this is not 

okay in so many levels. Even if we do it like this, 


function x(n) {

	console.log(n);

}


x(1)(2);


This makes no sense,


x(1)(2)


Now, if we remove the secnd parameter (2), then that will work perfectly fine,


function x(n){

	console.log(n);

}


x(1);


Console:


1



We get our '1' but that makes no sense. In order to make the expression x(1)(2) work, remember when a function is ran it is fundamentally replaced with whatever the return value is. What 

that means is we need to return a function inside of x, in order to immediately do another open and close. 


So, instead of console.logging (n) we are going to return a new function and we will do a rocket function as that will make a little bit more sense, 


function x(n) {

	return(m) => {

		console.log(n + m);

	}

}


x(1)(2); 


So, we have gotten a function called x, and x returns another function and that function is going to take a variable called "m", and inside that function we are console.logging (n + m). 

So, x(1) will run, that is the "function x(n)" part and that is going to be completely replaced by the return value of this function. Well, what is the return value? 

The return value is "console.log(n + m)". So, it is going to be more like this, 


x(1)(2);  is  (m) => {

			console.log(n + m);

		} (2);


So, the parameter that is being passed as 2 is going to end up as m, and we are going to console.log(n + m). This is where closures come into play and the concept of scoping in JavaScript.

This is not the priority for this course, but we still have access inside of the return() function to the original "m".

So, when the parameter (2) gets invoked we will still know what the old variable was and no one can ever change it.

So, when we run this now,

function x(n) {

	return(m) => {

		console.log(n + m);

	}

}


Unlike before when it crashed, it will now give us an answer as below, 


Console:

3


So, we are returning a function inside a function in order to get an output from this function expression, x(1)(2).

We can also go another step deeper and make it more complex,


function x(n) {

	return (m) => {

		console.log(n + m);

			return (j) => {

				console.log(n + m + j);

			}

	}

}


x(1)(2)(3);

So, the first function, that is this,

x(1);

And this function returns a function, and which is this,

x(1)(2)(3);

Now, if we run this whole function we get this,

6


This is not a JavaScript class so we will end here. We just wanted to make all familiar with this concept.

We will follow another concept like this with Redux Middleware. 

But this concept is getting more common in JavaScript, if it is a new toy to play with, then just make sure that you do it in purpose because it is very fraustrating when you need to dig 

through function, after function, after function, but this concept of functional programming is more common. 


FrozenDept.js

src/components/FrozenDept.js


import React, { Component } from "react";


// We want this component to know about "redux".

// To do that, we need some help, .... or some glue

// The glue is react-redux! We need the connect function 


import { connect } from "react-redux";


class FrozenDept extends Component {

	render() {

		return (

			<h1>The Frozen Food Department</h1>

		)

	}

}


console.log(connect);


// export default FrozenDept;

export default connect()(FrozenDept);


So, that is what is happening here, is that the connect() function some where inside of "redux", if we go and find the connect() function inside of "redux", then we will see that it would 

return a function. It needs to return a function orelse it would break. 


The connect() function is going to take a parameter and that parameter, that argument, is going to be the component (FrozenDept) that we want to render. 


Let's look what is inside the connect() function and we are going to console.log the connect() function that got exported from "react-redux" and it better be a function. 


So, we run our app and this is what we get for console.logging (connect), 


Console:

f connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {

	if(_ref2 === void 0) {

		_ref2 = {};

	}

var _ref3 = _ref2,

	_ref3$pure = _ref3.pure,

	pure = _ref3$pur....


So, now if we look at the console on our browser we can see that connect() is a function called "connect" and it takes 3 arguments with it 'mapStateToProps', 'mapDispatchtoProps', and 

'mergeProps'. 


Remember, the parameter (argument) "mapStateToProps" because this is the parameter that we are going to use and we will come back to "mapDispatchToProps" a little bit later after that. So,

the connect() function takes 2 arguments, the first one is the "mapStateToProps()" function. This function is going to map a piece of "redux" state to the prop of the React Component that 

we are passing with the connect function. 


Now, we are going to define the "mapStateToProps()" function. Before defining the function we need to let you know that the "mapStateToProps()" function takes one parameter (argument) and 

that argument is the rootReducer or the Store. It is a bit complicated than that but think of it as a rootReducer. 

Now, we will define the "mapStateToProps()" function,


// mapStateToProps takes 1 argument, "state" and that is the rootReducer/Store.

// mapStateToProps returns an object, with:

// property as the local prop name assigned to this component

// Value will be the property in the rootReducer....

// That is the piece of the Store


function mapStateToProps(state) {

	return {

		frozenData: state.frozen

	}

}


So, we have gotten a function (mapStatetoProps) which returns an object (frozenData: state.frozen). We are declaring a local propery (frozenData) to this and assigning the component 

(state.frozen) that is not being sent down from a parent, it is coming from the connect() function, which is getting it from the Store (theStore). What does the Store have? Well, the Store 

or the rootReducer is "state". What properties do we have as option in the combineReducer() function? We only have "frozen".

So, if we do "state.frozen" we are going to get the return value of the frozenReducer. What is the return value of frozenReducer? It is the state that the frozenReducer is returning from 

its function in the frozenreducer.js file. 


What is that state? Right now it is an empty array. 


Now, we will pass the mapStateToProps as a parameter (argument) to the connect() function. That is the argument we are handing to the connect() function. mapStateToProps() function takes 

the "state" as its parameter (argument) which is the rootReducer. The rootReducer (state) has a property of frozen, we are going to map that state to this component's (FrozenDept) props and

those props are going to be called frozenData.

Now, we will console.log(this.props.frozenData) in the body of the FrozenDept component, 


class FrozenDept extends Component {

	render() {

		console.log(this.props.frozenData);

		return (

			<h1>The Frozen Food Department</h1>

		)

	}

}



Now, if we save our file, run our app and look on the console of our browser then this is what we will see,


Console:

	[]


There we go. We are now connected to Redux. 


We rendered our FrozenDept component in the App.js file,


App.js

import React from "react";

import "./App.css";

import FrozenDept from "./components/FrozenDept";


function App() {

	return (

		<div className = "App">

			<FrozenDept />

		</div> 

	);

}


export default App;


But we do not pass the property call frozenData to the FrozenDept component. Normally, without "redux" we would have done this, 



function App() {

	return (

		<div className = "App">

			<FrozenDept frozenData = {} />

		</div>

	);

}


But instead of the parent sending it down we are reaching out to the "redux" Store (theStore) right in the function definition of mapStateToProps() in the FrozenDept.js file. There we are 

mapping a piece of state in the "redux" store to the FrozenDept component's props. Which state? The frozen piece of state. The frozen piece of state is in the combineReducers() function 

assigned to the rootReducer.js file. 


We are assigning it to frozenData as state.frozen,


function mapStateToProps(state) {

	return {

		frozenData: state.frozen

	}

}


We take this function and we hand it to the connect() function, 


export default connect(mapStateToProps)(FrozenData);


So, this is the "redux" part. Let's set up a function that can go and fetch something from the "redux" store, and then lets hand it to the component. That brings us to the full circle where

now if we go back over to frozen.js and put some data in there,


frozen.js


// All reducers have 2 params:

// 1. Current State, usually provide a default state

// 2. Info that came from any action 



const seedData = [

	"TV Dinners",

	"Frozen Veggies",

	"Frozen Pizzas"

]



export default (state = seedData, action) => {

	return state;

}



// function frozen(state = seedData, action) {

//	return state;

// }

// export default frozen;



Now if we go back to our browser and take a look on the console then this is what we see,


["TV Dinners", "Frozen Veggies", "Frozen Pizzas"]


We are pulling the data in this array from out of the "redux" store.


This is how we connect to the "redux" store. In the next lesson we will get an action creator and an action, going that will give us the ability to update our state. We will add a couple 

more reducers. 



frozenReducer.js


// All reducers have 2 parameters 

// 1. Current State, usually provide a defaul state 

// 2. Info that came from any action 


const seedData = [

	"TV Dinners",

	"Frozen Veggies",

	"Frozen Pizzas"

]


export default (state = seedData, action) => {

	return state;

}



// function frozen(state = [], action) {

// return state;

// }

// export default frozen;



rootReducer.js 


// This is the root reducer! It is the store manager 

// for all the reducers to make a root reducer:


// 1. Get a method from redux, called combineReducers


import { combineReducers } from "redux";


// 2. Get each individual reducer 


import frozenReducer from "./frozen";


// 3. call combineReducers and hand it an object

// each key in combineReducers will be a piece of state 

// in the redux store. Each value will be the value of that

// piece of state in the redux store.


const rootReducer = combineReducers({

			frozen: frozenReducer

		})


export default rootReducer;



FrozenDept.js

import React, { Component } from "react";


// We want this "react" component to know about "redux".

// To do that, we need some help, .... or some glue

// The glue is the react-redux! We need connect function


import { connect } from "react-redux";


class FrozenDept extends Component {

	render() {

		console.log(this.props.frozenData);

		return (

			<h1>The Frozen Food Department</h1>

		)

	}

}


// console.log(connect);


// mapStateToProps takes 1 argument, "state" and that is the rootReducer/Store


// mapStateToProps returns an object, with:

// property is the local prop name to this component

// value will be the property in the root reducer .... i.e, a piece of state


function mapStateToProps(state) {

	return {

		frozenData: state.frozen

	}

}


// export default FrozenDept;

// connect takes 2 arguments, the first one is:

// a function that is going to map

// A piece of redux store to this component's props


export default connect(mapStateToProps)(FrozenDept);



App.js

import React from "react";

import "./App.css";

import FrozenDept from "./components/FrozenDept";


function App() {

	return (

		<div className = "App"> 

			<FrozenDept />

		</div>

	);

}


export default App;





Question/Answer

I understand how each of the reducers get combined in the rootReducer after getting imported from each of their corresponding reducer files and then getting combined in the rootReducer

using the combineReducer() function. Then from this combineReducer() function each of the state of the reducers are sent to their corresponding react Department Components, like 

frozenReducer gets imported to the rootReducer where the combineReducer() function assigns frozen to the frozenReducer and the state of this frozenReducer is imported to FrozenDept 

component file where it is used in the mapStateToProps() function, and then that function is sent as a parameter to the connect() function to connect the state of the frozenReducer to the 

FrozenDept component. 


Now, my question is, how is the state of the frozenReducer being sent to the FrozenDept.js component file where it is being used in the mapStateToProps() function? We are not using the 

"import" command in this file which we normally use to import something to our current file, so how is the frozenReducer state getting transferred to the FrozenDept.js file from the 

rootReducer.js file?


Ans: All well said. The mapStateToProps() function is being handed to the "connect()" method which comes from ..... "react-redux". What else comes from "react-redux"? The Provider component

back in the index.js file! Remember, the Provider component is handed the Store which is our rootReducer.


This means:

frozenReducer ->  rootReducer ->  Provider ->  wraps around all React


FrozenDept(inside the Reducer) passes mapStateToProps to connect --- which is part of react-redux. 


The Provider (part of react-redux) component passes state down to the connect() function, which gets your function!  

 