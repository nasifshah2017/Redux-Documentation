Lecture-83: Adding more Reducers to our Store 


We will add more reducers in this lesson.


frozenReducer.js

// All reducers have 2 params:

// 1. Current State, usually provide a default state

// 2. Info that came from any action


const seedData = [

	{

		food: "TV Dinners",

		quantity: 10

	},

	{

		food: "Frozen Veggies",

		quantity: 21

	},

	{

		food: "Frozen Pizzas",

		quantity: 25

	}

]



// Probably the array of objects will be coming from a database but this will give us something to work with. 



export default (state = seedData, action) => {

	return state;

} 


Now, we will go to our FrozenDept.js file and we will define a function there which will map through this array of objects and it will dispaly the data in that array in the FrozenDept 

component,


FrozenDept.js

import React, { Component } from "react";

import { connect } from "react-redux";


class FrozenDept extends Component {

	render() {

		const frozenInventory = this.props.frozenData.map((item, i) => {

			return <li key = {i}>{item.food}: {item.quantity}</li> 

		})  

		return (

			<div>

				<h1>The Frozen Food Inventory</h1>

				<ul>

					{frozenInventory}

				</ul>
			
			</div> 

		)

	}

}


function mapStateToProps(state) {

	return {

		frozenData: state.frozen

	}

}

export default connect(mapStateToProps)(FrozenDept);



So, as you can see we declared an array variable by the name "frozenInventory" and this variable is assigned to a map function, which is mapping through the array of objects in the 

frozenData that we have defined in our rootReducer, we are mapping through the array, and each time we are on an item, we are assigning that item to our item variable. In the map function 

we are going to build a bunch of "li's" and then we are going to stack those items in our "frozenInventory" array. We are mapping through the "redux" piece of state but it is mapped through

the props of this particular component, so we got it out of the "redux" store and we put it in a prop that this component map throughs it, stores each of the items in the "frozenInventory"

array by placing each of them in the "li's". 


Then we will put our "frozenInventory" array in curly-braces as it is JavaScript and we will place it in JSX, in our return statement of the components in the "ul" tags. 


Now this is running our application this is what we see on our browser, 


	                                                            The Frozen Food Department

									  TV Dinners: 10

									 Frozen Veggies: 21

                                                                          Frozen Pizzas: 25


Now we have got The Frozen Food Department with our data being displayed in the FrozenDept "react" component which it receives from the "redux" store of the rootReducer, and the rootReducer

receives the data from the frozenReducer. We are going to add two more reducers just to be consistent with our diagram, and just to fill out the Store little bit more.


Now, we will define the produceReducer.js file, in the same way we defined the frozenReducer. 


We import the built-in createStore() function from redux, then we assign this function to the theStore variable and we pass the rootReducer as an argument to the createStore function,


								theStore = createStore(rootReducer)


We pass this theStore variable to the Provider (react-redux) component and that passes it to the App component and from there the Frozen react component connects to the store and receives 

the rootReducer.


produceReducer.js

// All reducers have 2 parameters:

// 1. Current State, usually provide a default state

// 2. Info that came from any action


const seedData = [

	{

		food: "lettuce",

		quantity: 14

	},

	{
	
		food: "turnips",

		quantity: 11

	},

	{

		food: "apples"

		quantity: 35

	}

]


export default (state = seedData, action) => {

	return state;

}



// function frozen (state = [], action) {

//	return state;

// }


This file is exactly the same as the otehr one, it just got a little bit different seedData. We are going to make one more reducer file and this time instead of produceReducer we will do 

meatReducer. 


meatReducer.js

// All reducers have 2 params:

// 1. Current State, usually provide a default state

// 2. Info that came from any action


const seedData = [

	{

		food: "chicken brest",

		quantity: 14

	},

	{

		food: "bacon",

		quantity: 11

	},

	{

		food: "mahi mahi",

		quantity: 35

	}

]



export default (state = seedData, action) => {

	return state;

}



So, we have 3 reducers now and "redux" does not know about these because theStore, back in index.js is informed by the rootReducer, so everytime we add a new reducer, you need to come to 

the rootReducer and import the new reducer in the rootReducer. 


So, we will import the two new reducers in the rootReducer.js file. 


Down below where we are defining the rootReducer function, the rootReducer is made up of all of the little reducers or all of the smaller pieces, 


						const rootReducer = combineReducers({

							frozen: frozenReducer,

							produce: produceReducer,

							meat: meatReducer

						})

						export default rootReducer; 


So, we have got "frozen" and that will be a piece of state inside the store and it is equal to the return value of the frozenReducer function, and we did the same thing for the other two 

reducers where we have the produce and that is equal to produceReducer and then we will have meat and that is assigned to the meatReducer function.


rootReducer.js

// This is the root reducer!! It is the store manager for all the reducers.


// To make a root reducer:


// 1. Get a method from "redux", called combineReducers


import { combineReducers } from "redux";


// 2. Get each individual reducer


import frozenReducer from "./frozenReducer";

import produceReducer from "./produceReducer"; 

import meatReducer from "./meatReducer";


// 3. call combineReducers and hand it an object

// Each key in combineReducers will be a piece of state

// in the "redux" store. Each value, will be the value of that piece of state in "redux". 



	const rootReducer = combineReducers({

		frozen: frozenReducer,

		produce: produceReducer,

		meat: meatReducer

	})


	export default rootReducer; 


Just like a grocery store, our Store is made up of little departments, frozen, produce and meat, and each one of these departments (reducers) is one of these little functions,



	export default (state = seedData, action) => {

		return state;

	}


They just return a piece of state, and our state does not chnage yet, but it will make it easier to understand down the road. 


So, back over in FrozenDept now if we go down to mapStateToProps(),


		function mapStateToProps(state) {

			return {

				frozenData: state.frozen

			}

		}


// Its getting this from the store, the store is connected to the React component from the Provider component we are only grabbing frozenData but if for some reason we needed to check some

// of the other ones then we can now grab the meatData, and now only instead of state.frozen, we have also gotten state.produce and state.meat. We have all three pieces of these states. 



FrozenDept.js

import React, { Component } from "react";

import { connect } from "react-redux";


class FrozenDept extends Component {

	render() {

		console.log(this.props.meatData);

		const frozenInventory = this.props.frozenData.map((item, i) => {

			return <li key = {i}>{item.food}: {item.quantity}</li>

		})

		return(

			<div>

				<h1>The Frozen Food Department</h1>

				<ul>

					{frozenInventory}

				</ul>

			</div>

		)

	}

}


function mapStateToProps(state) {

	return {

		frozenData: state.frozen

		meatData: state.meat

	}

} 


export default connect(mapStateToProps)(FrozenDept); 


Now, here we are console.logging the meatData (this.props.meatData) that we are getting from the rootReducer and this is what we see on our console,



Console coding:

0: {food: "chicken brest", quantity: 14}

1: {food: "bacon", quantity: 11}

2: {food: "mahi mahi", quantity: 35}

3: {food: "salmon", quantity: 135}


This is our meat department, so this is the beauty of "redux", is that anytime any new data is added to the Store, then any "react" component can have access to it, almost instantly, all we

need to do is drop in this one line in our return statement,


									    meatData: state.meat


and it is suddenly accessible in our component. As oppose to needing to rearchitecture an entire application by moving state up, by creating call backs at the appropriate levels and so on. 


This is a huge win. Now, we are going to get rid of the console.log and now we need to make two more "react" components. We need to make a MeatDept component and we need to make a 

ProduceDept component, and we can pretty much copy and paste the FrozenDept component but that is always dangerous as we can get lot of errors doing that and we can take as much time or as 

little time as we need but we will be doing basically the exact same thing and inside of the App function, in the App.js file, we need to render the MeatDept and the ProduceDept. 


They all pretty much work the same way but the difference is that each one of the other ones will be mapping through the appropriate data, so we will end up with The Frozen Food Department,

and then right below it, it will look like the exact same thing but it will be a different component with a different header and different data. 



App.js

import React from "react";

import "./App.css";

import FrozenDept from "./components/FrozenDept";

import MeatDept from "./components/MeatDept";

import ProduceDept from "./components/ProduceDept";


function App() {

	return(

		<div className = "App">

			<FrozenDept />

			<MeatDept />

			<ProduceDept />

		</div>

	);

}


export default App;


MeatDept.js

import React, { Component } from "react";

import { connect } from "react-redux";


class MeatDept extends Component {

	render() {

		const meatInventory = this.props.meatData.map((item, i) => {

			return <li key = {i}>{item.food}: {item.quantity}</li>

		})

		return(

			<div>

				<h1>The Meat Food Department</h1>

				<ul>

					{meatInventory}

				</ul>

			</div>

		)

	}

}



function mapStateToProps(state) {

	return {

		meatData: state.meat

	}

}


export default connect(mapStateToProps)(MeatData);


ProduceDept.js

import React, { Component } from "react";

import { connect } from "react-redux";


class ProduceDept extends Component {

	render() {

		const produceInventory = this.props.produceData.map((item, i) => {

			return <li key = {i}>{item.food}: {item.quantity}</li>

		})

		return(

			<div>

				<h1>The Produce Food Department</h1>

				<ul>

					{produceInventory}

				</ul>

			</div>

		)

	}

}



function mapStateToProps(state) {

	return {

		produceData: state.produce

	}

}



export default connect(mapStateToProps)(ProduceDept); 


FrozenDept.js

import React, { Component } from "react";

import { connect } from "react-redux";


class FrozenDept extends Component {

	render() {

		const frozenInventory = this.props.frozenData.map((item, i) => {

			return <li key = {i}>{item.food}: {item.quantity}</li>

		})

		return(

			<div>

				<h1>The Frozen Food Department</h1>

				<ul>

					{frozenInventory}

				</ul>

			</div>

		)

	}

}



function mapStateToProps(state) {

	return {

		frozenData: state.frozen

	}

}


export default connect(mapStateToProps)(FrozenDept);



rootReducer.js

// This is the rootReducer!! It is the store manager for all the reducers.


// To make a rootReducer:


// 1. Get a method from redux, called combineReducers


import { combineReducers } from "redux";


// 2. Get each individual reducer


import frozenReducer from "./frozenReducer";

import produceReducer from "./produceReducer";

import meatReducer from "./meatReducer";


// 3. call combineReducers and hand it an object 

// Each key in combineReducers will be a piece of state

// in the "redux" store. Each value will be the value 

// of that piece of state in "redux"



const rootReducer = combineReducers({

	frozen: frozenReducer

	produce: produceReducer

	meat: meatReducer

})


export default rootReducer;



frozenReducer.js

// All reducers have 2 parameters

// 1. Current State, usually provide a default state

// 2. Info that came from any action


const seedData = [

	{

		food: "TV Dinners"

		quantity: 10

	},

	{

		food: "Frozen Veggies"

		quantity: 21

	},

	{

		food: "Frozen Pizzas"

		quantity: 25

	},

]



export default (state = seedData, action) => {

	return state;

}



meatReducer.js

// All reducers have 2 parameters

// 1. Current State, usually provide a default state

// 2. Info that came from any action


const seedData = [

	{

		food: "chicken brests'

		quantity: 10

	},

	{

		food: "bacon"

		quantity: 11

	},

	{

		food: "mahi mahi"

		quantity: 35

	},

	{

		food: "salmon"

		quantity: 135

	}

]


export default (state = seedData, action) => {

	return state;

}



produceReducer.js

// All reducers have 2 parameters

// 1. Current State, usually provide a default state

// 2. Info that come from any action


const seedData = [

	{

		food: "lettuce"

		quantity: 14

	},

	{

		food: "turnips"

		quantity: 11

	},

	{

		food: "apples"

		quantity: 35

	},

	{

		food: "cilantro"

		quantity: 135

	}

]


export default (state = seedData, action) => {

	return state;

}



Output:

		The Frozen Food Department

		     TV Dinners: 10

                    Frozen Veggies: 21

                    Frozen Pizzas: 25


		The Meat Food Department

		    Chicken brest: 14

	               bacon: 11

                     mahi mahi: 35

                      salmon: 135

              The Produce Food Department

                     Lettuce: 14

                     Turnips: 11

                     Apples: 35

                     Cilantro: 135		

		 